# Задание 1: Анализ списка чисел с помощью Counter
# 1. Сгенерируйте случайный список чисел.
# 2. Используйте Counter, чтобы подсчитать количество уникальных элементов в списке.
# 3. Найдите три наиболее часто встречающихся элемента в списке и выведите их с количеством вхождений.


from collections import Counter

# 1. Генерируем случайный список чисел.
nums = [3, 2, 5, 4, 5, 4, 9, 4, 1, 5, 1, 4]

# 2. Используем Counter, чтобы подсчитать количество уникальных элементов в списке.
counter = Counter(nums)

# 3. Находим три наиболее часто встречающихся элемента в списке и выводим их с количеством вхождений.
most_common = counter.most_common(3)
print(most_common)


# Задание 2: Работа с именованными кортежами
# 1. Создайте именованный кортеж Book с полями title, author, genre.
# 2. Создайте несколько экземпляров Book.
# 3. Выведите информацию о книгах, используя атрибуты именованных кортежей.


from collections import namedtuple

# 1. Создаём именованный кортеж 'Book'
Book = namedtuple('Book', ['title', 'author', 'genre'])

# 2. Создаём несколько экземпляров Book
book1 = Book(title='Война и Мир', author='Толстой Л.Н.', genre='Роман-эпопея')
book2 = Book(title='Мастер и Маргарита', author='Булгаков М.А.', genre='Роман')

# 3. Выводим информацию о книгах, используя атрибуты именованных кортежей.
print(book1.title, book2.author)


# Задание 3: Работа с defaultdict
# 1. Создайте defaultdict с типом данных list.
# 2. Добавьте несколько элементов в словарь, используя ключи и значения.
# 3. Выведите содержимое словаря, где значения - это списки элементов с одинаковыми ключами.

from collections import defaultdict

# 1. Создаем defaultdict с типом данных list
d = defaultdict(list)

# 2. Добавляем несколько элементов в словарь, используя ключи и значения.
s = [('Мальчик', 'Павел'), ('Девочка', 'Ксения'), ('Девочка', 'Марина'), ('Девочка', 'Ольга'), ('Мальчик', 'Матвей')]

# Заполняем defaultdict
for k, v in s:
    d[k].append(v)
sorted_items = sorted(d.items())

# 3. Выводим содержимое словаря, где значения - это списки элементов с одинаковыми ключами.
print("Содержимое словаря, отсортированное по ключам:")
for key, values in sorted_items:
    print(f"{key}: {values}")


# Задание 4: Использование deque для обработки данных
# 1. Создайте deque и добавьте в него элементы.
# 2. Используйте методы append, appendleft, pop и popleft для добавления и удаления элементов из deque.
# 3. Проверьте, как изменяется deque после каждой операции.


from collections import deque

# 1. Создаём deque и добавляем в него элементы.
queue = deque(['банан', 'апельсин', 'яблоко'])

# 2.1 Используем методы append и appendleft для добавления элементов из deque.
queue.append('мандарин')  # Добавление элемента в конец
print(queue)
queue.appendleft('груша')  # Добавление элемента в начало
print(queue)

# 2.2 Используем методы pop и popleft для удаления элементов из deque.
queue.pop()  # Удаление элемента с конца
print(queue)
queue.popleft()  # Удаление элемента с начала
print(queue) # вывод на экран после каждой операции сделала для наглядности


# Задание 5: Реализация простой очереди с помощью deque
# 1. Напишите функции для добавления и извлечения элементов из deque.
# 2. Создайте пустой deque.
# 3. Используйте написанные функции для добавления и извлечения элементов из очереди.


from collections import deque

# 1.1 Функция для добавления элемента в deque
def add_element(d, element):
    d.append(element)
    print(f"Элемент '{element}' добавлен. Текущая очередь: {list(d)}")

# 1.2 Функция для извлечения элемента из deque
def remove_element(d):
    if d:
        removed_element = d.popleft()
        print(f"Элемент '{removed_element}' извлечён. Текущая очередь: {list(d)}")
        return removed_element
    else:
        print("Очередь пуста.")
        return None

# 2. Создаём пустой deque
my_deque = deque()

# 3.1 Использование функций для добавления
add_element(my_deque, 'Земля')
add_element(my_deque, 'Венера')
add_element(my_deque, 'Марс')

# 3.2 Использование функций для извлечения элементов
remove_element(my_deque)
remove_element(my_deque)
remove_element(my_deque)
remove_element(my_deque)